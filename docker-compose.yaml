services:

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686"                    # Jaeger UI
      - "4317"                     # OTLP gRPC default port
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.61.0
    container_name: otel-col
    deploy:
      resources:
        limits:
          memory: 100M
    restart: always
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
    volumes:
      - ./otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
      - ./otelcollector/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
    ports:
      - "4317"          # OTLP over gRPC receiver
      - "4318:4318"     # OTLP over HTTP receiver
      - "9464"          # Prometheus exporter
      - "8888"          # metrics endpoint
    depends_on:
      - jaeger

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.34.0
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
    volumes:
      - ./prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    ports:
      - "9090:9090"

  loki:
    container_name: loki
    image: grafana/loki:2.4.1
    restart: unless-stopped
    ports: ["3100:3100", "9096"]
    mem_limit: 512m
    volumes:
      - ./loki/loki.yaml:/etc/loki/local-config.yaml
      - /var/log:/var/log:ro
      - ./loki/data:/loki
    user: "1000:1000"

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "15672:15672"
      - "5672:5672"

  sql-server:
    container_name: sql_server
    build:
      context: sql

  redis:
    container_name: redis
    image: redis:latest

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.6
    environment:
    - "discovery.type=single-node"

  front-envoy:
    container_name: envoy_proxy
    build:
      context: .
      dockerfile: envoy/Dockerfile-frontenvoy
    ports:
      - "${PORT_PROXY:-10000}:8000"
    dns:
      - 8.8.8.8
      - 8.8.4.4

  telemetry-web:
    depends_on:
    - rabbitmq
    container_name: telemetry_web
    environment:
      - DOTNET_ENVIRONMENT=Development
    build:
      context: .
      dockerfile: Web.Dockerfile

  telemetry-worker:
    depends_on:
    - rabbitmq
    container_name: telemetry_worker
    environment:
      - DOTNET_ENVIRONMENT=Development
    build:
      context: .
      dockerfile: Worker.Dockerfile

networks:
  default:
    name: "telemetry_testing"
